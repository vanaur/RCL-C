/* -*- c -*- This FLex file was machine-generated by the BNF converter */
%option noyywrap
%{
#define yylval RCLlval
#define YY_BUFFER_APPEND RCL_BUFFER_APPEND
#define YY_BUFFER_RESET RCL_BUFFER_RESET
#define initialize_lexer RCL_initialize_lexer
#include <string.h>
#include <Parser>
#define YY_BUFFER_LENGTH 4096
extern int yy_mylinenumber ;
char YY_PARSED_STRING[YY_BUFFER_LENGTH];
void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
void YY_BUFFER_RESET(void)
{
  int x;
  for(x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>".idata"      	 return _SYMB_0;
<YYINITIAL>".define"      	 return _SYMB_1;
<YYINITIAL>".main"      	 return _SYMB_2;
<YYINITIAL>"."      	 return _SYMB_3;
<YYINITIAL>"="      	 return _SYMB_4;
<YYINITIAL>"("      	 return _SYMB_5;
<YYINITIAL>")"      	 return _SYMB_6;
<YYINITIAL>"->"      	 return _SYMB_7;
<YYINITIAL>"!"      	 return _SYMB_8;
<YYINITIAL>"::"      	 return _SYMB_9;
<YYINITIAL>"["      	 return _SYMB_10;
<YYINITIAL>"]"      	 return _SYMB_11;
<YYINITIAL>"*"      	 return _SYMB_12;
<YYINITIAL>"~"      	 return _SYMB_13;
<YYINITIAL>"#"      	 return _SYMB_14;
<YYINITIAL>"\\"      	 return _SYMB_15;
<YYINITIAL>"$"      	 return _SYMB_16;
<YYINITIAL>"{"      	 return _SYMB_17;
<YYINITIAL>"}"      	 return _SYMB_18;
<YYINITIAL>"+"      	 return _SYMB_19;
<YYINITIAL>"-"      	 return _SYMB_20;
<YYINITIAL>"**"      	 return _SYMB_21;
<YYINITIAL>"/"      	 return _SYMB_22;
<YYINITIAL>"%"      	 return _SYMB_23;
<YYINITIAL>"++"      	 return _SYMB_24;
<YYINITIAL>"--"      	 return _SYMB_25;
<YYINITIAL>"&"      	 return _SYMB_26;
<YYINITIAL>"|"      	 return _SYMB_27;
<YYINITIAL>"^"      	 return _SYMB_28;
<YYINITIAL>"<<"      	 return _SYMB_29;
<YYINITIAL>">>"      	 return _SYMB_30;
<YYINITIAL>","      	 return _SYMB_31;
<YYINITIAL>";"      	 return _SYMB_32;
<YYINITIAL>"any"      	 return _SYMB_33;
<YYINITIAL>"as"      	 return _SYMB_34;
<YYINITIAL>"define"      	 return _SYMB_35;
<YYINITIAL>"double"      	 return _SYMB_36;
<YYINITIAL>"else"      	 return _SYMB_37;
<YYINITIAL>"error"      	 return _SYMB_38;
<YYINITIAL>"extern"      	 return _SYMB_39;
<YYINITIAL>"fault"      	 return _SYMB_40;
<YYINITIAL>"float"      	 return _SYMB_41;
<YYINITIAL>"ifdef"      	 return _SYMB_42;
<YYINITIAL>"import"      	 return _SYMB_43;
<YYINITIAL>"include"      	 return _SYMB_44;
<YYINITIAL>"info"      	 return _SYMB_45;
<YYINITIAL>"int"      	 return _SYMB_46;
<YYINITIAL>"long"      	 return _SYMB_47;
<YYINITIAL>"schar"      	 return _SYMB_48;
<YYINITIAL>"self"      	 return _SYMB_49;
<YYINITIAL>"sint"      	 return _SYMB_50;
<YYINITIAL>"sint16"      	 return _SYMB_51;
<YYINITIAL>"sint32"      	 return _SYMB_52;
<YYINITIAL>"sint64"      	 return _SYMB_53;
<YYINITIAL>"sint8"      	 return _SYMB_54;
<YYINITIAL>"slong"      	 return _SYMB_55;
<YYINITIAL>"sshort"      	 return _SYMB_56;
<YYINITIAL>"structure"      	 return _SYMB_57;
<YYINITIAL>"then"      	 return _SYMB_58;
<YYINITIAL>"uchar"      	 return _SYMB_59;
<YYINITIAL>"uint"      	 return _SYMB_60;
<YYINITIAL>"uint16"      	 return _SYMB_61;
<YYINITIAL>"uint32"      	 return _SYMB_62;
<YYINITIAL>"uint64"      	 return _SYMB_63;
<YYINITIAL>"uint8"      	 return _SYMB_64;
<YYINITIAL>"ulong"      	 return _SYMB_65;
<YYINITIAL>"ushort"      	 return _SYMB_66;
<YYINITIAL>"void"      	 return _SYMB_67;
<YYINITIAL>"warning"      	 return _SYMB_68;

<YYINITIAL>"//"[^\n]*\n ++yy_mylinenumber; // BNFC: comment "//";
<YYINITIAL>"/*" BEGIN COMMENT; // BNFC: comment "/*" "*/";
<COMMENT>"*/" BEGIN YYINITIAL;
<COMMENT>. /* skip */;
<COMMENT>[\n] ++yy_mylinenumber;

<YYINITIAL>{CAPITAL}({LETTER}|{DIGIT}|\_)*     	 yylval.string_ = strdup(yytext); return _SYMB_69;
<YYINITIAL>{SMALL}({LETTER}|{DIGIT}|\_)*     	 yylval.string_ = strdup(yytext); return _SYMB_70;
<YYINITIAL>"\""      	 BEGIN STRING;
<STRING>\\      	 BEGIN ESCAPED;
<STRING>\"      	 yylval.string_ = strdup(YY_PARSED_STRING); YY_BUFFER_RESET(); BEGIN YYINITIAL; return _STRING_;
<STRING>.      	 YY_BUFFER_APPEND(yytext);
<ESCAPED>n      	 YY_BUFFER_APPEND("\n"); BEGIN STRING;
<ESCAPED>\"      	 YY_BUFFER_APPEND("\""); BEGIN STRING ;
<ESCAPED>\\      	 YY_BUFFER_APPEND("\\"); BEGIN STRING;
<ESCAPED>t       	 YY_BUFFER_APPEND("\t"); BEGIN STRING;
<ESCAPED>.       	 YY_BUFFER_APPEND(yytext); BEGIN STRING;
<YYINITIAL>"'" 	BEGIN CHAR;
<CHAR>\\      	 BEGIN CHARESC;
<CHAR>[^']      	 BEGIN CHAREND; yylval.char_ = yytext[0]; return _CHAR_;
<CHARESC>n      	 BEGIN CHAREND; yylval.char_ = '\n'; return _CHAR_;
<CHARESC>t      	 BEGIN CHAREND; yylval.char_ = '\t'; return _CHAR_;
<CHARESC>.      	 BEGIN CHAREND; yylval.char_ = yytext[0]; return _CHAR_;
<CHAREND>"'"      	 BEGIN YYINITIAL;
<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval.double_ = atof(yytext); return _DOUBLE_;
<YYINITIAL>{DIGIT}+      	 yylval.int_ = atoi(yytext); return _INTEGER_;
\n ++yy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return _ERROR_;
%%
void initialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
